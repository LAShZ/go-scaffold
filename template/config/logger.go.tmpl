package config

{{if eq .Config.Log.Logger "go.uber.org/zap"}}

import (
	"github.com/spf13/viper"
    "github.com/natefinch/lumberjack"
    "go.uber.org/zap"
    "go.uber.org/zap/zapcore"
)

var Logger *zap.SugaredLogger

var LogLevel map[string]zapcore.Level = map[string]zapcore.Level{
	"debug":  zapcore.DebugLevel,
	"info":   zapcore.InfoLevel,
	"warn":   zapcore.WarnLevel,
	"error":  zapcore.ErrorLevel,
	"dpanic": zapcore.DPanicLevel,
	"panic":  zapcore.PanicLevel,
	"fatal":  zapcore.FatalLevel,
}

func InitLogger(cfg *viper.Viper) {
    encoder := NewEncoder()
    writer := NewLogWriter()

    core := zapcore.NewCore(encoder, writer, LogLevel[cfg.GetString("loglevel")])
    l := zap.New(core, zap.AddCaller())
    Logger = l.Sugar()
}

func NewEncoder() zapcore.Encoder {
    cfg := zap.NewProductionEncoderConfig()
    cfg.EncodeTime = zapcore.ISO8601TimeEncoder
    return zapcore.NewJSONEncoder(cfg)
}

func NewLogWriter() zapcore.WriteSyncer {
    logger := &lumberjack.Logger {
        Filename: "./log/log.log",
        MaxSize: 100,
        MaxBackups: 3,
        MaxAge: 7,
        Compress: false,
    }
    return zapcore.AddSync(logger)
}
{{- end}}